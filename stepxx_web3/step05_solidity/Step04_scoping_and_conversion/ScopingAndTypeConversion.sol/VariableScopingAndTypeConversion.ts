/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VariableScopingAndTypeConversionInterface
  extends utils.Interface {
  functions: {
    "explicitConversion()": FunctionFragment;
    "getInternalNumber()": FunctionFragment;
    "getPrivateNumber()": FunctionFragment;
    "getPublicNumber()": FunctionFragment;
    "implicitConversion()": FunctionFragment;
    "myPublicNumber()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "explicitConversion"
      | "getInternalNumber"
      | "getPrivateNumber"
      | "getPublicNumber"
      | "implicitConversion"
      | "myPublicNumber"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "explicitConversion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInternalNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrivateNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implicitConversion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "myPublicNumber",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "explicitConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInternalNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrivateNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implicitConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myPublicNumber",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VariableScopingAndTypeConversion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VariableScopingAndTypeConversionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    explicitConversion(overrides?: CallOverrides): Promise<[number]>;

    getInternalNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrivateNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPublicNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    implicitConversion(overrides?: CallOverrides): Promise<[number]>;

    myPublicNumber(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  explicitConversion(overrides?: CallOverrides): Promise<number>;

  getInternalNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getPrivateNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getPublicNumber(overrides?: CallOverrides): Promise<BigNumber>;

  implicitConversion(overrides?: CallOverrides): Promise<number>;

  myPublicNumber(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    explicitConversion(overrides?: CallOverrides): Promise<number>;

    getInternalNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getPrivateNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicNumber(overrides?: CallOverrides): Promise<BigNumber>;

    implicitConversion(overrides?: CallOverrides): Promise<number>;

    myPublicNumber(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    explicitConversion(overrides?: CallOverrides): Promise<BigNumber>;

    getInternalNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getPrivateNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicNumber(overrides?: CallOverrides): Promise<BigNumber>;

    implicitConversion(overrides?: CallOverrides): Promise<BigNumber>;

    myPublicNumber(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    explicitConversion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInternalNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrivateNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublicNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implicitConversion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myPublicNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
